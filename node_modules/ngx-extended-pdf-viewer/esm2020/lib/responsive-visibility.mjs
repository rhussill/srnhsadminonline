import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class PdfBreakpoints {
}
PdfBreakpoints.xs = 490;
PdfBreakpoints.sm = 560;
PdfBreakpoints.md = 610;
PdfBreakpoints.lg = 660;
PdfBreakpoints.xl = 740;
PdfBreakpoints.xxl = 830;
export class ResponsiveCSSClassPipe {
    transform(visible, defaultClass) {
        switch (visible) {
            case undefined:
                return defaultClass;
            case false:
                return 'invisible';
            case true:
                return defaultClass;
            case 'always-visible':
                return '';
            case 'xs':
                return 'hiddenTinyView';
            case 'sm':
                return 'hiddenSmallView';
            case 'md':
                return 'hiddenMediumView';
            case 'lg':
                return 'hiddenLargeView';
            case 'xl':
                return 'hiddenXLView';
            case 'xxl':
                return 'hiddenXXLView';
        }
    }
}
ResponsiveCSSClassPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: ResponsiveCSSClassPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ResponsiveCSSClassPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: ResponsiveCSSClassPipe, name: "responsiveCSSClass" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: ResponsiveCSSClassPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'responsiveCSSClass' }]
        }] });
export class NegativeResponsiveCSSClassPipe {
    transform(visible, defaultClass) {
        switch (visible) {
            case undefined:
                return 'invisible';
            case false:
                return 'invisible';
            case true:
                return defaultClass;
            case 'always-visible':
                return 'invisible';
            case 'xs':
                return 'visibleTinyView';
            case 'sm':
                return 'visibleSmallView';
            case 'md':
                return 'visibleMediumView';
            case 'lg':
                return 'visibleLargeView';
            case 'xl':
                return 'visibleXLView';
            case 'xxl':
                return 'visibleXXLView';
        }
    }
}
NegativeResponsiveCSSClassPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: NegativeResponsiveCSSClassPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
NegativeResponsiveCSSClassPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: NegativeResponsiveCSSClassPipe, name: "negativeResponsiveCSSClass" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: NegativeResponsiveCSSClassPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'negativeResponsiveCSSClass' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2l2ZS12aXNpYmlsaXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWV4dGVuZGVkLXBkZi12aWV3ZXIvc3JjL2xpYi9yZXNwb25zaXZlLXZpc2liaWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7O0FBSXBELE1BQU0sT0FBTyxjQUFjOztBQUNsQixpQkFBRSxHQUFHLEdBQUcsQ0FBQztBQUVULGlCQUFFLEdBQUcsR0FBRyxDQUFDO0FBRVQsaUJBQUUsR0FBRyxHQUFHLENBQUM7QUFFVCxpQkFBRSxHQUFHLEdBQUcsQ0FBQztBQUVULGlCQUFFLEdBQUcsR0FBRyxDQUFDO0FBRVQsa0JBQUcsR0FBRyxHQUFHLENBQUM7QUFJbkIsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQyxTQUFTLENBQUMsT0FBeUMsRUFBRSxZQUFvQjtRQUN2RSxRQUFRLE9BQU8sRUFBRTtZQUNmLEtBQUssU0FBUztnQkFDWixPQUFPLFlBQVksQ0FBQztZQUN0QixLQUFLLEtBQUs7Z0JBQ1IsT0FBTyxXQUFXLENBQUM7WUFDckIsS0FBSyxJQUFJO2dCQUNQLE9BQU8sWUFBWSxDQUFDO1lBQ3RCLEtBQUssZ0JBQWdCO2dCQUNuQixPQUFPLEVBQUUsQ0FBQztZQUNaLEtBQUssSUFBSTtnQkFDUCxPQUFPLGdCQUFnQixDQUFDO1lBQzFCLEtBQUssSUFBSTtnQkFDUCxPQUFPLGlCQUFpQixDQUFDO1lBQzNCLEtBQUssSUFBSTtnQkFDUCxPQUFPLGtCQUFrQixDQUFDO1lBQzVCLEtBQUssSUFBSTtnQkFDUCxPQUFPLGlCQUFpQixDQUFDO1lBQzNCLEtBQUssSUFBSTtnQkFDUCxPQUFPLGNBQWMsQ0FBQztZQUN4QixLQUFLLEtBQUs7Z0JBQ1IsT0FBTyxlQUFlLENBQUM7U0FDMUI7SUFDSCxDQUFDOztvSEF4QlUsc0JBQXNCO2tIQUF0QixzQkFBc0I7NEZBQXRCLHNCQUFzQjtrQkFEbEMsSUFBSTttQkFBQyxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRTs7QUE2QnBDLE1BQU0sT0FBTyw4QkFBOEI7SUFDekMsU0FBUyxDQUFDLE9BQTZCLEVBQUUsWUFBb0I7UUFDM0QsUUFBUSxPQUFPLEVBQUU7WUFDZixLQUFLLFNBQVM7Z0JBQ1osT0FBTyxXQUFXLENBQUM7WUFDckIsS0FBSyxLQUFLO2dCQUNSLE9BQU8sV0FBVyxDQUFDO1lBQ3JCLEtBQUssSUFBSTtnQkFDUCxPQUFPLFlBQVksQ0FBQztZQUN0QixLQUFLLGdCQUFnQjtnQkFDbkIsT0FBTyxXQUFXLENBQUM7WUFDckIsS0FBSyxJQUFJO2dCQUNQLE9BQU8saUJBQWlCLENBQUM7WUFDM0IsS0FBSyxJQUFJO2dCQUNQLE9BQU8sa0JBQWtCLENBQUM7WUFDNUIsS0FBSyxJQUFJO2dCQUNQLE9BQU8sbUJBQW1CLENBQUM7WUFDN0IsS0FBSyxJQUFJO2dCQUNQLE9BQU8sa0JBQWtCLENBQUM7WUFDNUIsS0FBSyxJQUFJO2dCQUNQLE9BQU8sZUFBZSxDQUFDO1lBQ3pCLEtBQUssS0FBSztnQkFDUixPQUFPLGdCQUFnQixDQUFDO1NBQzNCO0lBQ0gsQ0FBQzs7NEhBeEJVLDhCQUE4QjswSEFBOUIsOEJBQThCOzRGQUE5Qiw4QkFBOEI7a0JBRDFDLElBQUk7bUJBQUMsRUFBRSxJQUFJLEVBQUUsNEJBQTRCLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNpdmVWaXNpYmlsaXR5ID0gYm9vbGVhbiB8ICdhbHdheXMtdmlzaWJsZScgfCAneHMnIHwgJ3NtJyB8ICdtZCcgfCAnbGcnIHwgJ3hsJyB8ICd4eGwnO1xuXG5leHBvcnQgY2xhc3MgUGRmQnJlYWtwb2ludHMge1xuICBzdGF0aWMgeHMgPSA0OTA7XG5cbiAgc3RhdGljIHNtID0gNTYwO1xuXG4gIHN0YXRpYyBtZCA9IDYxMDtcblxuICBzdGF0aWMgbGcgPSA2NjA7XG5cbiAgc3RhdGljIHhsID0gNzQwO1xuXG4gIHN0YXRpYyB4eGwgPSA4MzA7XG59XG5cbkBQaXBlKHsgbmFtZTogJ3Jlc3BvbnNpdmVDU1NDbGFzcycgfSlcbmV4cG9ydCBjbGFzcyBSZXNwb25zaXZlQ1NTQ2xhc3NQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybSh2aXNpYmxlOiBSZXNwb25zaXZlVmlzaWJpbGl0eSB8IHVuZGVmaW5lZCwgZGVmYXVsdENsYXNzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHN3aXRjaCAodmlzaWJsZSkge1xuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q2xhc3M7XG4gICAgICBjYXNlIGZhbHNlOlxuICAgICAgICByZXR1cm4gJ2ludmlzaWJsZSc7XG4gICAgICBjYXNlIHRydWU6XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q2xhc3M7XG4gICAgICBjYXNlICdhbHdheXMtdmlzaWJsZSc6XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIGNhc2UgJ3hzJzpcbiAgICAgICAgcmV0dXJuICdoaWRkZW5UaW55Vmlldyc7XG4gICAgICBjYXNlICdzbSc6XG4gICAgICAgIHJldHVybiAnaGlkZGVuU21hbGxWaWV3JztcbiAgICAgIGNhc2UgJ21kJzpcbiAgICAgICAgcmV0dXJuICdoaWRkZW5NZWRpdW1WaWV3JztcbiAgICAgIGNhc2UgJ2xnJzpcbiAgICAgICAgcmV0dXJuICdoaWRkZW5MYXJnZVZpZXcnO1xuICAgICAgY2FzZSAneGwnOlxuICAgICAgICByZXR1cm4gJ2hpZGRlblhMVmlldyc7XG4gICAgICBjYXNlICd4eGwnOlxuICAgICAgICByZXR1cm4gJ2hpZGRlblhYTFZpZXcnO1xuICAgIH1cbiAgfVxufVxuXG5AUGlwZSh7IG5hbWU6ICduZWdhdGl2ZVJlc3BvbnNpdmVDU1NDbGFzcycgfSlcbmV4cG9ydCBjbGFzcyBOZWdhdGl2ZVJlc3BvbnNpdmVDU1NDbGFzc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKHZpc2libGU6IFJlc3BvbnNpdmVWaXNpYmlsaXR5LCBkZWZhdWx0Q2xhc3M6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgc3dpdGNoICh2aXNpYmxlKSB7XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuICdpbnZpc2libGUnO1xuICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgcmV0dXJuICdpbnZpc2libGUnO1xuICAgICAgY2FzZSB0cnVlOlxuICAgICAgICByZXR1cm4gZGVmYXVsdENsYXNzO1xuICAgICAgY2FzZSAnYWx3YXlzLXZpc2libGUnOlxuICAgICAgICByZXR1cm4gJ2ludmlzaWJsZSc7XG4gICAgICBjYXNlICd4cyc6XG4gICAgICAgIHJldHVybiAndmlzaWJsZVRpbnlWaWV3JztcbiAgICAgIGNhc2UgJ3NtJzpcbiAgICAgICAgcmV0dXJuICd2aXNpYmxlU21hbGxWaWV3JztcbiAgICAgIGNhc2UgJ21kJzpcbiAgICAgICAgcmV0dXJuICd2aXNpYmxlTWVkaXVtVmlldyc7XG4gICAgICBjYXNlICdsZyc6XG4gICAgICAgIHJldHVybiAndmlzaWJsZUxhcmdlVmlldyc7XG4gICAgICBjYXNlICd4bCc6XG4gICAgICAgIHJldHVybiAndmlzaWJsZVhMVmlldyc7XG4gICAgICBjYXNlICd4eGwnOlxuICAgICAgICByZXR1cm4gJ3Zpc2libGVYWExWaWV3JztcbiAgICB9XG4gIH1cbn1cbiJdfQ==